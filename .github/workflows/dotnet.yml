name: .NET build and test

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - master
      - '*'
  workflow_dispatch:

env:
    CONTINUOUS_INTEGRATION: true
    prodigo_portal_jwt_secret: "test-json-web-token-secret"
    prodigo_portal_db_connectionstring: "Server=localhost;Database=ProdigoPortal_test;User Id=SA; Password=ASDjk_shd$$jkASKJ19821;"
    prodigo_portal_admin_password: "test_password"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/**
          key: cache-build-${{ github.run_id }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

  application-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ build ]

    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/**
          key: cache-build-${{ github.run_id }}

      - name: Run tests and collect coverage
        run: >
          dotnet test --no-build tests/Application.Tests
          -p:CollectCoverage=true
          -p:Threshold=80
          -p:ThresholdType=branch
          -p:CoverletOutput=../../CoverageResults/
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute\"
          -p:Include=\"[Application]*\"

  domain-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/**
          key: cache-build-${{ github.run_id }}

      - name: Run tests and collect coverage
        run: >
          dotnet test --no-build tests/Domain.Tests
          -p:CollectCoverage=true
          -p:Threshold=80
          -p:ThresholdType=branch
          -p:CoverletOutput=../../CoverageResults/
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute\"
          -p:Include=\"[Domain]*\"

  client-tests:
    runs-on: windows-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3

      - name: Run tests and collect coverage
        run: >
          dotnet test tests/Client.Tests
          -p:CollectCoverage=true
          -p:Threshold=80
          -p:ThresholdType=branch
          -p:Include=\"[Client]*\"
          -p:CoverletOutput=../../CoverageResults/
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute%2cExcludeFromCodeCoverageAttribute\"

  infrastructure-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ build ]

    services:
      sql.data:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: "ASDjk_shd$$jkASKJ19821"
          ACCEPT_EULA: Y
        ports:
          - "1433:1433"

    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/**
          key: cache-build-${{ github.run_id }}

      - name: Install dotnet-ef
        run: dotnet tool install --global dotnet-ef
        continue-on-error: true

      - name: Update database
        run: dotnet ef database update -p src/Infrastructure
        env:
          ASPNETCORE_ENVIRONMENT: Development

      - name: Run tests and collect coverage
        run: >
          dotnet test --no-build tests/Infrastructure.Tests
          -p:CollectCoverage=true
          -p:Threshold=80
          -p:ThresholdType=branch
          -p:CoverletOutput=../../CoverageResults/
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute\"
          -p:Include=\"[Infrastructure]*\"

  server-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/**
          key: cache-build-${{ github.run_id }}

      - name: Cache server coverage
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/contract-portal/CoverageResults
          key: cache-server-coverage-${{ github.run_id }}

      - name: Run tests and collect coverage
        run: >
          dotnet test --no-build tests/Server.Tests
          -p:CollectCoverage=true
          -p:ThresholdType=branch
          -p:CoverletOutput=../../CoverageResults/
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute\"
          -p:Include=\"[Server]*\"

  server-integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ build, server-tests ]

    services:
      sql.data:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: "ASDjk_shd$$jkASKJ19821"
          ACCEPT_EULA: Y
        ports:
          - "1433:1433"

    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/**
          key: cache-build-${{ github.run_id }}

      - name: Install dotnet-ef
        run: dotnet tool install --global dotnet-ef
        continue-on-error: true

      - name: Update database
        run: dotnet ef database update -p src/Infrastructure
        env:
          ASPNETCORE_ENVIRONMENT: Development

      - name: Cache server coverage
        uses: actions/cache@v3
        with:
          path: /home/runner/work/contract-portal/contract-portal/CoverageResults
          key: cache-server-coverage-${{ github.run_id }}

      - name: Run tests and collect coverage
        run: >
          dotnet test --no-build tests/Server.Tests.Integration
          -p:CollectCoverage=true
          -p:Threshold=80
          -p:ThresholdType=branch
          -p:CoverletOutput=../../CoverageResults/
          -p:MergeWith="../../CoverageResults/coverage.json"
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute\"
          -p:Include=\"[Server]*\"
