@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Application.Users
@using Blazored.SessionStorage
@using Blazorise.Extensions
@using Client.Services.Authentication
@using Domain.Users
@inherits UpdateOnAuthenticateView
@inject HttpClient Http
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject ISessionService Session

<div class="modal" id="log-in">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <EditForm Model="@_user" OnSubmit="LogInUser">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <label class="form-label">
                                <h3>Logga in</h3>
                            </label>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <InputText id="username" class="form-control" placeholder="Användarnamn" @bind-Value="@_user.Name"/>
                        <InputText id="password" type="password" class="form-control mt-3" placeholder="Lösenord" @bind-Value="@_user.Password"/>

                        @if (_loggingIn)
                        {
                            <LoadingIndicator/>
                        }
                        else if (_logInFailed)
                        {
                            <p class="text-danger">Inloggningen misslyckades</p>
                        }
                    </div>
                    <div class="login-footer">
                        <button type="submit" class="btn btn-primary mb-3 ">Logga in</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private User _user = new (){ Name = "", Password = "", };
    private bool _logInFailed = false;
    private bool _loggingIn = false;

    private async Task LogInUser()
    {
        _loggingIn = true;
        HttpResponseMessage response = await Http.PostAsJsonAsync("api/v1/users/authenticate", _user);
        _loggingIn = false;
        if (response.IsSuccessStatusCode)
        {
            _logInFailed = false;

            var authResponse = await response.Content.ReadFromJsonAsync<AuthenticateResponse>();

            if (authResponse is null)
            {
                _logInFailed = true;
                return;
            }

            // Begin new session.
            await Session.BeginAsync(authResponse);

            await Js.InvokeVoidAsync("closeModal", "#log-in");
            NavigationManager.NavigateTo("contracts");
        }
        else
        {
            _logInFailed = true;
        }
    }

}
