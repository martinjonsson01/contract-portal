@using System.Timers
@inject IJSRuntime Js
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
<CascadingValue Value="@_loggedInUser" Name="LoggedInUser">
    <CascadingValue Value="@OnUserLoginEventHandler" Name="OnUserLoginChange">
        <ThemeProvider Theme="@_theme">
            <div class="page">
                <main>
                    <div class="sticky-top">
                        <NavMenu/>
                    </div>
                    <article class="content px-4">
                        @Body
                        <LoginModal OnUserLogInChange="@OnUserLogIn"/>
                    </article>
                </main>
            </div>
        </ThemeProvider>
    </CascadingValue>
</CascadingValue>

@code
{
    private EventCallback<string> OnUserLoginEventHandler => new(this, OnUserLogIn);

    private void OnUserLogIn(string username)
    {
        _loggedInUser = username;
        StateHasChanged();
    }

    private string? _loggedInUser = string.Empty;

    private readonly Theme _theme = new()
    {
        ColorOptions = new ThemeColorOptions
        {
            Primary = "#3e4b65",
            Secondary = "#516285",
            Dark = "222939",
            Info = "#ffeeae",
            Link = "#dadee8",
            Danger = "#3D0F16",
        },
        IsRounded = true,
    };

        private const int InactivityLogoutMilliseconds = 7000;

    private readonly Timer _timer = new(InactivityLogoutMilliseconds);

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        _timer.Elapsed += LogOut;
        _timer.AutoReset = false;

    // Register JS-callbacks on the document that call ResetTimer when triggered.
        await Js.InvokeVoidAsync("registerActivityCallback", DotNetObjectReference.Create(this));
    }

    /// <summary>
    /// Resets the inactivity timer. Call when user has shown signs of activity.
    /// </summary>
    [JSInvokable]
    public void ResetTimer()
    {
        _timer.Stop();
        _timer.Start();
    }

    private void LogOut(object? sender, ElapsedEventArgs elapsedEventArgs)
    {
        InvokeAsync(() =>
        {
            // TODO: this method should be moved into the session management service when merging with #118
            Http.DefaultRequestHeaders.Authorization = null;
            OnUserLogIn(string.Empty);
            NavigationManager.NavigateTo("/");
        });
    }
}
