@using Newtonsoft.Json
@using System.Net
@typeparam TData
@inject HttpClient _http;
@inherits AuthenticatedView

@if (_errorMessage is not null && ShouldShowErrors)
{
    <p id="error-message">@_errorMessage</p>
}
else if (Data is null)
{
    @LoadingIndicator
}
else
{
    <!-- Render child content using the fetched data. -->
    @ChildContent(Data)
}

@code {

    /// <summary>
    /// Where to send a GET-request and fetch data from.
    /// </summary>
    [Parameter, EditorRequired,]
    public string Url { get; set; } = null!;

    /// <summary>
    /// The content to render using the fetched data.
    /// </summary>
    [Parameter, EditorRequired,]
    public RenderFragment<TData> ChildContent { get; set; } = null!;

    /// <summary>
    /// An indicator that is shown while the data is being fetched.
    /// </summary>
    [Parameter,]
    public RenderFragment LoadingIndicator { get; set; } = @<LoadingIndicator />;

    /// <summary>
    /// Whether any errors that occur while fetching data should be shown to the user.
    /// </summary>
    [Parameter]
    public bool ShouldShowErrors { get; set; } = true;

    /// <summary>
    /// The data that has been fetched.
    /// </summary>
    public TData? Data { get; set; }

    private string? _errorMessage;

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Data is null && _errorMessage is null)
            await Fetch(Url);
    }

    /// <summary>
    /// Fetches data from the URL and renders it using the previously set fragments.
    /// </summary>
    public async Task Fetch(string url)
    {
        HttpResponseMessage response = await _http.GetAsync(url);

        if (!response.IsSuccessStatusCode)
        {
            _errorMessage = CreateErrorMessage(response.StatusCode);
            StateHasChanged();
            return;
        }

        Data = await response.Content.ReadFromJsonAsync<TData>();
        _errorMessage = null;
        StateHasChanged();
    }

    private string CreateErrorMessage(HttpStatusCode statusCode)
    {
        if (statusCode == HttpStatusCode.Unauthorized)
        {
            return "Du måste vara inloggad för att se detta innehåll.";
        }
        return "Ett okänt fel har inträffat.";
    }

}
