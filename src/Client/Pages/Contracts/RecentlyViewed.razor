@using Domain.Contracts
@using Application.Contracts
@using System.Collections.ObjectModel
@inject HttpClient _http

<FetchData TData="Contract[]"
           Url="/api/v1/contracts/recent"
           Context="recents">

    <!-- No loading indicator. -->
    <LoadingIndicator></LoadingIndicator>


    <ChildContent>
        @if (ShouldShowRecent)
        {
            AddRecents(recents);
            if (_recent.Size(LoggedInUser) > 0)
            {
                <h3>Senast besökta</h3>

                <div class="d-flex flex-row justify-content-around flex-wrap">
                    @foreach (Contract contract in _recent.FetchRecentContracts(LoggedInUser).Reverse())
                    {
                        <ContractCard Contract=@contract/>
                    }
                </div>
                <hr/>
            }
        }

    </ChildContent>
</FetchData>

@code {


    [CascadingParameter(Name = nameof(LoggedInUser))]
    private string LoggedInUser { get; set; } = string.Empty;

    private bool ShouldShowRecent { get; set; } = true;


    /// <summary>
    /// Change whether the recent contracts should be displayed or not.
    /// </summary>
    /// <param name="shouldShow">Whether or not the recent contracts should be shown or not</param>
    public void ShowRecentContracts(bool shouldShow)
    {
        ShouldShowRecent = shouldShow;
        StateHasChanged();
    }

    private IRecentContractService _recent = new RecentContractService();

    private void AddRecents(Contract[]? recents)
    {
        if (recents is null) return;

        foreach (Contract contract in recents)
        {
            _recent.Add(LoggedInUser, contract);
        }
    }

    /// <summary>
    /// Tells the component to render itself again.
    /// </summary>
    public async void AddViewedContract(Contract newRecent)
    {
        _recent.Add(LoggedInUser, newRecent);
        await InvokeAsync(StateHasChanged);
    }

}
