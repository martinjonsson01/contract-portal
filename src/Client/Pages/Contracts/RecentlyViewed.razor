@using Domain.Contracts
@using Application.Contracts
@using System.Collections.ObjectModel
@using Blazorise.Extensions
@inject HttpClient _http
@inject ISessionService _session
@inherits UpdateOnAuthenticateView
@if (_session.IsAuthenticated)
{
    <FetchData @ref="_dataFetcher"
               TData="IEnumerable<Contract>"
               Url="@FetchUrl"
               Context="recents"
               ShouldShowErrors="@_session.IsAuthenticated">

        <!-- No loading indicator. -->
        <LoadingIndicator></LoadingIndicator>

        <ChildContent>
            @if (ShouldShowRecent)
            {
                if (_dataFetcher.Data != null && _dataFetcher.Data.Any())
                {
                    <h3>Senast besökta</h3>

                    <div id="recently-viewed-container" class="container-fluid">
                        <div class="d-flex flex-wrap justify-content-center">
                            @foreach (var contract in _dataFetcher.Data)
                            {
                                <div>
                                    <ContractCard Contract=@contract/>
                                </div>
                            }
                        </div>
                    </div>
                    <hr/>
                }
            }
        </ChildContent>
    </FetchData>
}

@code {
        const string BaseUrl = "api/v1/users/";
        const string UrlRecentSuffix = "/recents";

    private FetchData<IEnumerable<Contract>> _dataFetcher = null!;


    private bool _shouldShowRecent = true;

    /// <summary>
    /// Gets or sets whether recent contracts should be displayed or not.
    /// </summary>
    public bool ShouldShowRecent
    {
        get => _shouldShowRecent;
        set
        {
            _shouldShowRecent = value;
            StateHasChanged();
        }
    }

    private string FetchUrl => BaseUrl + _session.UserId + UrlRecentSuffix;


    /// <summary>
    /// Tells the component to render itself again.
    /// </summary>
    public async void AddViewedContract(Contract newRecent)
    {
        if (_session.Username is null or "")
            return;
        await _http.PostAsJsonAsync(FetchUrl, newRecent);
        await _dataFetcher.Fetch(FetchUrl);
        await InvokeAsync(StateHasChanged);
    }

}
