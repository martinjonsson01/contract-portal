@using Domain.Contracts
@using Application.Contracts
@using System.Collections.ObjectModel
@inject HttpClient _http
<FetchData
    @ref="_dataFetcher"
    TData="List<Contract>"
    Url="api/v1/contracts/recent/123"
    Context="recents">

    <!-- No loading indicator. -->
    <LoadingIndicator></LoadingIndicator>


    <ChildContent>
        @if (ShouldShowRecent)
        {
            if (_dataFetcher.Data is {Count: > 0 })
            {
                <h3>Senast besökta</h3>

                <div class="d-flex flex-row justify-content-around flex-wrap">
                    @foreach (var contract in _dataFetcher.Data)
                    {
                        <ContractCard Contract=@contract/>
                    }
                </div>
                <hr/>
            }
        }

    </ChildContent>
</FetchData>

@code {
        const string BaseUrl = "/api/v1/contracts/recent/";

    private FetchData<List<Contract>> _dataFetcher = null!;

    [CascadingParameter(Name = nameof(LoggedInUser))]
    private string LoggedInUser { get; set; } = string.Empty;

    private bool ShouldShowRecent { get; set; } = true;


    /// <summary>
    /// Change whether the recent contracts should be displayed or not.
    /// </summary>
    /// <param name="shouldShow">Whether or not the recent contracts should be shown or not</param>
    public void ShowRecentContracts(bool shouldShow)
    {
        ShouldShowRecent = shouldShow;
        StateHasChanged();
    }

    /// <summary>
    /// Tells the component to render itself again.
    /// </summary>
    public async void AddViewedContract(Contract newRecent)
    {
        await _http.PostAsJsonAsync($"api/v1/contracts/recent/{LoggedInUser}", newRecent);
        await _dataFetcher.Fetch(GetFetchUrl());
        StateHasChanged();
    }

    private string GetFetchUrl()
    {
        return BaseUrl + LoggedInUser;
    }

}
