@using Domain.Contracts
@using Application.Contracts
@using System.Collections.ObjectModel
@inject HttpClient _http
@inject ISessionService _session
@inherits AuthenticatedView

<FetchData TData="Contract[]"
           Url="/api/v1/contracts/recent"
           Context="recents"
           ShouldShowErrors="@_session.IsAuthenticated">

    <!-- No loading indicator. -->
    <LoadingIndicator></LoadingIndicator>

    <ChildContent>
        @{
            AddRecents(recents);
            if (_recent.Size() > 0)
            {
                <h3>Senast besökta</h3>

                <div class="container-fluid">
                    <div class="row">
                        @foreach (Contract contract in _recent.FetchRecentContracts().Reverse())
                        {
                            <div class="col-sm-4">
                                <ContractCard Contract=@contract />
                            </div>
                        }
                    </div>
                </div>
                <hr/>
            }
        }
    </ChildContent>
</FetchData>

@code {

    private IRecentContractService _recent = new RecentContractService(new Collection<Contract>());

    private void AddRecents(Contract[]? recents)
    {
        if (recents is null) return;

        foreach (Contract contract in recents)
        {
            _recent.Add(contract);
        }
    }

    /// <summary>
    /// Tells the component to render itself again.
    /// </summary>
    public async void AddViewedContract(Contract newRecent)
    {
        _recent.Add(newRecent);
        await InvokeAsync(StateHasChanged);
    }

}
