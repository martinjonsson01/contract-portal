@using Domain.Contracts
@using Application.Contracts
@using System.Collections.ObjectModel
@inject HttpClient _http
@inject ISessionService _session
@inherits AuthenticatedView

<FetchData @ref="_dataFetcher"
           TData="IEnumerable<Contract>"
           Url="@FetchUrl"
           Context="recents"
           ShouldShowErrors="@_session.IsAuthenticated">

    <!-- No loading indicator. -->
    <LoadingIndicator></LoadingIndicator>

    <ChildContent>
        @if (ShouldShowRecent)
        {
            if (_dataFetcher.Data != null && _dataFetcher.Data.Any())
            {
                <h3>Senast besökta</h3>

                <div class="container-fluid">
                        <div class="d-flex flex-wrap justify-content-center">
                        @foreach (var contract in _dataFetcher.Data)
                        {
                            <div>
                                <ContractCard Contract=@contract />
                            </div>
                        }
                    </div>
                </div>
                <hr/>
            }
        }
    </ChildContent>
</FetchData>

@code {
        const string BaseUrl = "/api/v1/contracts/recent/";

    private FetchData<IEnumerable<Contract>> _dataFetcher = null!;

    private bool ShouldShowRecent { get; set; } = true;

    private string FetchUrl => BaseUrl + _session.Username;

    /// <summary>
    /// Change whether the recent contracts should be displayed or not.
    /// </summary>
    /// <param name="shouldShow">Whether or not the recent contracts should be shown or not</param>
    public void ShowRecentContracts(bool shouldShow)
    {
        ShouldShowRecent = shouldShow;
        StateHasChanged();
    }

    /// <summary>
    /// Tells the component to render itself again.
    /// </summary>
    public async void AddViewedContract(Contract newRecent)
    {
        await _http.PostAsJsonAsync($"api/v1/contracts/recent/{_session.Username}", newRecent);
        await _dataFetcher.Fetch(FetchUrl);
        await InvokeAsync(StateHasChanged);
    }
}
