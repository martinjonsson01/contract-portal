@using Domain.Contracts
@using System.Runtime.Serialization
@inject ISessionService Session
@inject IJSRuntime Js
@inject HttpClient Http
@inject NavigationManager NavigationManager

<!-- modal-dialog-scrollable -->
<div class="modal w-100" id="@(("contract-details-" + Contract.Id).ToLowerInvariant())">
    <div class="modal-dialog modal-lg">

        <div class="modal-content @(ShouldHideDetails ? "blackout" : "")">

            <div class="modal-header flex-column p-0">
                <div class="position-relative w-100">
                    <button type="button" class="btn-close m-0 position-absolute top-0 end-0 bg-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    <img alt="@Contract.Name" id="contract-thumbnail" src="@ImagePath" class="p-0 border-0 w-100"/>
                </div>
                <h1 class="modal-title">@Contract.Name</h1>
            </div>

            <div class="modal-body">
                <div class="m-3">
                    <h2>Om erbjudandet</h2>
                    <MarkdownViewer Markdown="@Contract.Description"/>
                </div>
                <AccordionList>
                    <AccordionItem OpenByDefault="@(!ShouldHideDetails)">
                        <Title>
                            <h3>Hur man nyttjar erbjudandet</h3>
                        </Title>
                        <Body>
                        <MarkdownViewer Markdown="@Contract.Instructions"/>
                        </Body>
                    </AccordionItem>
                    <AccordionItem>
                        <Title>
                            <h3>Om @Contract.SupplierName</h3>
                        </Title>
                        <Body>
                        <MarkdownViewer Markdown="@Contract.SupplierDescription"/>
                        </Body>
                    </AccordionItem>
                    @if (!string.IsNullOrEmpty(Contract.AdditionalDocument))
                    {
                        <AccordionItem>
                            <Title>
                                <h3>Övriga filer</h3>
                            </Title>
                            <Body>
                            <a id="additional-document" href="@Contract.AdditionalDocument" download>
                                Ladda ned fil
                            </a>
                            </Body>
                        </AccordionItem>
                    }
                    @if (!string.IsNullOrEmpty(Contract.FAQ))
                    {
                        <AccordionItem>
                            <Title>
                                <h3 id="faq-title">Vanliga frågor</h3>
                            </Title>
                            <Body>
                            <MarkdownViewer Markdown="@Contract.FAQ"/>
                            </Body>
                        </AccordionItem>
                    }
                </AccordionList>
            </div>

            <div class="modal-footer">
                <MarkdownViewer Markdown="@Contract.SupplierContactInfo"/>
            </div>

        </div>

    </div>

    @if (ShouldHideDetails)
    {
        <div class="register-prompt d-flex justify-content-center">
            <div class="card p-4">
                <h4 class="text-body">
                    Bli medlem idag för att få åtkomst till erbjudandet!
                </h4>
                <a class="btn btn-primary" href="https://prodigo.se/kontakt/" target="_blank">
                    Kontakta oss här för att bli medlem
                </a>
            </div>
        </div>
    }

</div>

@code {

    /// <summary>
    /// The contract to render details of.
    /// </summary>
    [Parameter, EditorRequired,]
    public Contract Contract { get; set; } = null!;

    private bool ShouldHideDetails => !Session.IsAuthenticated;

    private string ImagePath => string.IsNullOrEmpty(Contract.InspirationalImagePath) ?
        Contract.SupplierLogoImagePath :
        Contract.InspirationalImagePath;

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        string detailsViewSelector = $"#contract-details-{Contract.Id}".ToLowerInvariant();
        DotNetObjectReference<ContractDetails> dotNetHelper = DotNetObjectReference.Create(this);
        await Js.InvokeVoidAsync("registerModalCloseCallback", detailsViewSelector, dotNetHelper);
    }

    /// <summary>
    /// Called when the details modal is closed.
    /// </summary>
    [JSInvokable]
    public void OnModalClose()
    {
        NavigationManager.NavigateTo("contracts");
    }

}
