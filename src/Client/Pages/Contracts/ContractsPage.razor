@page "/contracts"
@using Domain.Contracts
@inject HttpClient _http

<SearchBar OnQueryChange="OnQueryChanged"/>

<RecentlyViewed @ref="_recentlyViewed"/>

@if (_searchResults is null)
{
    <FetchData TData="Contract[]"
               Url="/api/v1/contracts"
               Context="contracts">

        @foreach (Contract contract in contracts)
        {
            <ContractCard Contract=@contract OnViewed="OnRecentContractAdded"/>
        }

    </FetchData>
}
else
{
    @foreach (Contract contract in _searchResults)
    {
        <ContractCard Contract=@contract OnViewed="OnRecentContractAdded"/>
    }
}

@code {
    private RecentlyViewed _recentlyViewed = null!;

    private IEnumerable<Contract>? _searchResults;

    private void OnRecentContractAdded(Contract viewedContract)
    {
        _recentlyViewed.AddViewedContract(viewedContract);
    }

    private async Task OnQueryChanged(string query)
    {
        string urlSafeQuery = Uri.EscapeDataString(query);
        _searchResults = await _http.GetFromJsonAsync<IEnumerable<Contract>>($"api/v1/contracts?query={urlSafeQuery}");
    }

}
