@using Domain.Contracts
@using System.Net
@using System.Text
@using Microsoft.AspNetCore.JsonPatch
@using Newtonsoft.Json
@inject IJSRuntime Js
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="card ms-2 me-2 prodigo-card"
     @onclick="OpenDetailsView">

    <img id="contract-thumbnail"
         src="@Contract.SupplierLogoImagePath"
         class="img-thumbnail img-fluid card-img-top rounded p-0 prodigo-card-img pointer"
         @onclick="AddToRecentlyViewed"/>

    <div class="card-body d-flex align-items-center p-0 height-35">

        <div class="d-flex flex-column width-100">

            <div class="pt-4 pointer"
                 @onclick="AddToRecentlyViewed">
            </div>

            <div class="d-flex flex-row">

                <div class="ps-3 pointer"
                     @onclick="AddToRecentlyViewed">
                </div>

                <div class="text-truncate prodigo-card-title pointer"
                     @onclick="AddToRecentlyViewed">

                    <h4 class="card-title text-truncate m-0" id="contract-name">@Contract.Name</h4>

                </div>

                <div class="d-flex justify-content-end width-10">
                    <FavoriteButton @ref="_favoriteButton"
                                    Contract="@Contract"
                                    OnFavoriteChange="@(ChangeFavorite)"/>
                </div>

                <div class="pe-3 pointer"
                     @onclick="AddToRecentlyViewed"></div>

            </div>

            <div class="pb-4 pointer"
                 @onclick="AddToRecentlyViewed">
            </div>

        </div>

    </div>

</div>

@code {

    /// <summary>
    /// The contract to render.
    /// </summary>
    [Parameter, EditorRequired,]
    public Contract Contract { get; set; } = null!;

    /// <summary>
    /// Called when a contract has been clicked successfully.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> OnViewed { get; set; } = EventCallback<Contract>.Empty;

    private FavoriteButton _favoriteButton = null!;

    /// <summary>
    /// Called when a contract has its favorite status changed.
    /// </summary>
    [Parameter]
    public EventCallback<(Guid, bool)> OnFavoriteChange { get; set; } = EventCallback<(Guid, bool)>.Empty;

    private async Task AddToRecentlyViewed()
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync("api/v1/contracts/recent", Contract);
        if (response.IsSuccessStatusCode)
        {
            await OnViewed.InvokeAsync(Contract);
        }
    }

    private async Task ChangeFavorite((Guid Id, bool IsFavorite) args)
    {
        await OnFavoriteChange.InvokeAsync(args);
    }

    private void OpenDetailsView()
    {
        NavigationManager.NavigateTo($"contracts/{Contract.Id}");
    }

}
