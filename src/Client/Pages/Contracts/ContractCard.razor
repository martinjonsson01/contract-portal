@using Domain.Contracts
@using System.Net
@using System.Text
@using Microsoft.AspNetCore.JsonPatch
@using Newtonsoft.Json
@inject IJSRuntime _js
@inject HttpClient _http

<div class="card" style="max-width: 30%;">
    <img id="contract-thumbnail" src="@Contract.SupplierLogoImagePath" class="img-thumbnail img-fluid" data-bs-toggle="modal" data-bs-target="#@("id_" + Contract.Id)" @onclick="AddToRecentlyViewed"/>
    <div class="card-body d-flex bd-highlight mb-3 d-flex align-items-center">
        <h3 class="p-2 bd-highlight flex-grow-1" id="contract-name">@Contract.Name</h3>
        <button class="btn ms-auto p-2 flex-shrink-0" @onclick="ChangeFavorite">
            @if (Contract.IsFavorite)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heart-fill" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                </svg>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heart" viewBox="0 0 16 16">
                    <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"/>
                </svg>
            }
        </button>
    </div>

</div>

<ContractDetails Contract="@Contract"/>

@code {

    /// <summary>
    /// The contract to render.
    /// </summary>
    [Parameter, EditorRequired,]
    public Contract Contract { get; set; } = null!;

    /// <summary>
    /// Called when a contract has been clicked successfully.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> OnViewed { get; set; } = EventCallback<Contract>.Empty;

    /// <summary>
    /// Called when a contract has its favorite status changed.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> OnFavoriteChange { get; set; } = EventCallback<Contract>.Empty;

    private async Task AddToRecentlyViewed()
    {
        HttpResponseMessage response = await _http.PostAsJsonAsync("/api/v1/contracts/recent", Contract);
        if (response.IsSuccessStatusCode)
        {
            await OnViewed.InvokeAsync(Contract);
        }
    }

    private async Task ChangeFavorite()
    {
        var patchDocument = new JsonPatchDocument<Contract>();
        patchDocument.Replace(contract => contract.IsFavorite, !Contract.IsFavorite);
        var serializedDocument = JsonConvert.SerializeObject(patchDocument);
        var content = new StringContent(serializedDocument, Encoding.UTF8, "application/json-patch+json");

        var response = await _http.PatchAsync($"/api/v1/Contracts/{Contract.Id}", content);
        if (response.IsSuccessStatusCode)
        {
            var contract = await response.Content.ReadFromJsonAsync<Contract>();
            if (contract != null) Contract = contract;
            await InvokeAsync(StateHasChanged);
            await OnFavoriteChange.InvokeAsync(contract);
        }
    }

}
