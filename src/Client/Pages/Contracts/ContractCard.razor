@using Domain.Contracts
@using System.Net
@using System.Text
@using Microsoft.AspNetCore.JsonPatch
@using Newtonsoft.Json
@inject IJSRuntime _js
@inject HttpClient _http

<div class="card" style="margin-top: 1em; width: 18rem; height: 18rem;">
    <img id="contract-thumbnail" src="@Contract.SupplierLogoImagePath" class="img-thumbnail img-fluid card-img-top" data-bs-toggle="modal" style="height: 65%; object-fit: cover;" data-bs-target="#@("id_" + Contract.Id)" @onclick="AddToRecentlyViewed"/>
    <div class="card-body d-flex bd-highlight d-flex align-items-center card-body" style="height: 35%;">
        <h3 class="card-title" id="contract-name">@Contract.Name</h3>
        <FavoriteButton @ref="_favoriteButton" Contract="@Contract" OnFavoriteChange="@FavoriteChange"></FavoriteButton>
    </div>

</div>

<ContractDetails Contract="@Contract"/>

@code {

    /// <summary>
    /// The contract to render.
    /// </summary>
    [Parameter, EditorRequired,]
    public Contract Contract { get; set; } = null!;

    /// <summary>
    /// Called when a contract has been clicked successfully.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> OnViewed { get; set; } = EventCallback<Contract>.Empty;

    private FavoriteButton _favoriteButton = null!;

    /// <summary>
    /// Called when a contract has its favorite status changed.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> OnFavoriteChange { get; set; } = EventCallback<Contract>.Empty;

    private async Task AddToRecentlyViewed()
    {
        HttpResponseMessage response = await _http.PostAsJsonAsync("/api/v1/contracts/recent", Contract);
        if (response.IsSuccessStatusCode)
        {
            await OnViewed.InvokeAsync(Contract);
        }
    }

    private async Task FavoriteChange(Contract contract)
    {
        Contract = contract;
        await OnFavoriteChange.InvokeAsync(contract);
    }

}
