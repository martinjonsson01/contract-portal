@using Domain.Contracts
@inject HttpClient _http
@if (_recent != null)
{
    @if (_recent.Count > 0)
    {
        <h3>Senast besökta</h3>

        <div class="d-flex flex-row justify-content-around flex-wrap">
            @foreach (Contract contract in _recent.ToArray().Reverse())
            {
                <ContractCard Contract=@contract/>
            }
        </div>
        <hr/>
    }
}


@code {

    private List<Contract>? _recent;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        Contract[]? recentArray = await _http.GetFromJsonAsync<Contract[]>("/api/v1/Contracts/Recent");
        if (recentArray != null) _recent = recentArray.ToList();
    }

    /// <summary>
    /// Tells the component to render itself again.
    /// </summary>
    public async void AddViewedContract(Contract newRecent)
    {
        if (_recent != null && _recent.Any(recentContract => recentContract.Id.Equals(newRecent.Id)))
        {
            return;
        }
        const int recentAmountMax = 3;
        if (_recent != null && _recent.Count >= recentAmountMax)
        {
            _recent.RemoveAt(0);
        }
        _recent?.Add(newRecent);
        await InvokeAsync(StateHasChanged);
    }

}
