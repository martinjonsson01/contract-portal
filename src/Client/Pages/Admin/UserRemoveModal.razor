@using Domain.Users
@inject HttpClient _http

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Ta bort användare</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Är du säker på att du vill ta bort användaren @User.Name?
      </div>
      <div class="modal-footer d-flex justify-content-between">
        <button type="button" id="confirm-remove-user" class="btn btn-danger" @onclick="RemoveUser" data-bs-dismiss="modal">Ta bort </button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Avbryt</button>
      </div>
    </div>
  </div>
</div>
@code
{
    /// <summary>
    /// Called when a user has been removed successfully.
    /// </summary>
    [Parameter]
    public EventCallback<User> OnUserRemoved { get; set; } = EventCallback<User>.Empty;

    /// <summary>
    /// The user.
    /// </summary>
    [Parameter, EditorRequired,]
    public User User { get; set; } = new();

    private async Task RemoveUser()
    {
        HttpResponseMessage response = await _http.DeleteAsync($"api/v1/Users/{User.Id}");
        if (response.IsSuccessStatusCode)
        {
            await OnUserRemoved.InvokeAsync(User);
        }
    }
}
