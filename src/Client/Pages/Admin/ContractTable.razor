@using Domain.Contracts
@inject HttpClient _http

<FetchData @ref="_dataFetcher"
           TData="List<Contract>"
           Url="/api/v1/contracts"
           Context="contracts">

    <h4>Dina kontrakt</h4>
    <table class="table table-striped table-responsive-md btn-table">
        <thead>
            <tr>
                <th scope="col">Kontraktnamn</th>
                <th scope="col">Företag</th>
                <th scope="col">Redigera</th>
                <th scope="col">Ta bort</th>
            </tr>
        </thead>

        <tbody>
        @foreach (Contract contract in contracts)
        {
            <ContractTableRow @key="@contract.Id"
                              Contract=@contract
                              OnContractRemoved=@Remove
                              ContractOpeningForEdit="@(async () => await ContractOpeningForEdit.InvokeAsync(contract))"/>
        }
        </tbody>
    </table>

</FetchData>

@code {
    private FetchData<List<Contract>> _dataFetcher = null!;


    /// <summary>
    /// Called when a <see cref="Contract"/> is being opened to be edited.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> ContractOpeningForEdit { get; set; } = EventCallback<Contract>.Empty;

    /// <summary>
    /// Adds a contract to the list.
    /// </summary>
    /// <param name="contract">The contract to add.</param>
    public void AddOrUpdate(Contract contract)
    {
        if (_dataFetcher.Data is null)
            return;

        if (_dataFetcher.Data.Any(other => other.Id == contract.Id))
        {
            _dataFetcher.Data.RemoveAll(toRemove => toRemove.Id == contract.Id);
            _dataFetcher.Data.Add(contract);
        }
        else
        {
            _dataFetcher.Data.Add(contract);
        }
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Removes a contract from the list.
    /// </summary>
    /// <param name="contract">The contract to remove.</param>
    private async Task Remove(Contract contract)
    {
        HttpResponseMessage response = await _http.DeleteAsync($"api/v1/contracts/{contract.Id}");
        if (response.IsSuccessStatusCode)
        {
            _dataFetcher.Data!.Remove(contract);
            await InvokeAsync(StateHasChanged);
        }

    }

}
