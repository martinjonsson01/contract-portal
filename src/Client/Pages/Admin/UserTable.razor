@using Domain.Users
@inject HttpClient _http

<FetchData @ref="_dataFetcher"
           TData="List<User>"
           Url="/api/v1/users"
           Context="users">

    <h4>Dina kunder</h4>
    <table class="table table-striped table-responsive-md btn-table">
        <thead>
        <tr>
            <th scope="col">Namn</th>
            <th scope="col">FÃ¶retag</th>
            <th scope="col">Senaste betalning</th>
            <th scope="col">Redigera</th>
            <th scope="col">Ta bort</th>
        </tr>
        </thead>

        <tbody>
        @foreach (User user in users)
        {
            <UserTableRow @key="@user.Id"
                          User=@user
                          OnUserRemoved=@Remove
                          UserOpeningForEdit="@(async () => await UserOpeningForEdit.InvokeAsync(user))"/>
        }
        </tbody>
    </table>

</FetchData>

@code {
    private FetchData<List<User>> _dataFetcher = null!;

    /// <summary>
    /// Called when a <see cref="User"/> is being opened to be edited.
    /// </summary>
    [Parameter]
    public EventCallback<User> UserOpeningForEdit { get; set; } = EventCallback<User>.Empty;

    /// <summary>
    /// Adds a user to the list, or updates an existing user.
    /// </summary>
    /// <param name="user">The user to add.</param>
    public void AddOrUpdate(User user)
    {
        if (_dataFetcher.Data is null)
            return;

        if (_dataFetcher.Data.Any(other => other.Id == user.Id))
        {
            _dataFetcher.Data.RemoveAll(toRemove => toRemove.Id == user.Id);
            _dataFetcher.Data.Add(user);
        }
        else
        {
            _dataFetcher.Data.Add(user);
        }
        InvokeAsync(StateHasChanged);
    }


    /// <summary>
    /// Removes a user from the list.
    /// </summary>
    /// <param name="user">The user to remove.</param>
    private async Task Remove(User user)
    {
        HttpResponseMessage response = await _http.DeleteAsync($"api/v1/users/{user.Id}");
        if (response.IsSuccessStatusCode)
        {
            // Using null forgiving operator because because _users
            // can not be null when remove button is pressed.
            _dataFetcher.Data!.Remove(user);
            await InvokeAsync(StateHasChanged);
        }
    }


}
