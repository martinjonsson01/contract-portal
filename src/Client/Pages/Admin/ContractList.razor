@using Domain.Contracts
@inject HttpClient _http

<FetchData @ref="_dataFetcher"
           TData="List<Contract>"
           Url="/api/v1/contracts"
           Context="contracts">

    <h4>Dina kontrakt</h4>
    <table class="table table-striped table-responsive-md btn-table">
        <thead>
            <tr>
                <th scope="col">Kontraktnamn</th>
                <th scope="col">Företag</th>
                <th scope="col">Ta bort</th>
            </tr>
        </thead>

        <tbody>
        @foreach (Contract contract in contracts)
        {
            <ContractListItem Contract=@contract OnContractRemoved=@OnContractRemoved/>
        }
        </tbody>
    </table>

</FetchData>

@code {

    private FetchData<List<Contract>> _dataFetcher = null!;

    /// <summary>
    /// Adds a contract to the list.
    /// </summary>
    /// <param name="contract">The contract to add.</param>
    public void Add(Contract contract)
    {
        _dataFetcher.Data?.Add(contract);
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Removes a contract from the list.
    /// </summary>
    /// <param name="contract">The contract to remove.</param>
    private void OnContractRemoved(Contract contract)
    {
    // Using null forgiving operator because because _contracts
    // can not be null when remove button is pressed.
        _dataFetcher.Data!.Remove(contract);
        InvokeAsync(StateHasChanged);
    }

}
