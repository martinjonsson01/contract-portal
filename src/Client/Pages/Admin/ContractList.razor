@using Domain.Contracts
@inject HttpClient _http

<FetchData @ref="_dataFetcher"
            TData="List<Contract>"
           Url="/api/v1/contracts/all"
           Context="contracts">

    <div class="list-group">
        @foreach (Contract contract in contracts)
        {
            <ContractListItem Contract=@contract OnContractRemoved=@OnContractRemoved/>
        }
    </div>

</FetchData>

@code {

    private FetchData<List<Contract>> _dataFetcher = null!;

    /// <summary>
    /// Adds a contract to the list.
    /// </summary>
    /// <param name="contract">The contract to add.</param>
    public void Add(Contract contract)
    {
        _dataFetcher.Data?.Add(contract);
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Removes a contract from the list.
    /// </summary>
    /// <param name="contract">The contract to remove.</param>
    private void OnContractRemoved(Contract contract)
    {
        // Using null forgiving operator because because _contracts
        // can not be null when remove button is pressed.
        _dataFetcher.Data!.Remove(contract);
        InvokeAsync(StateHasChanged);
    }
}

