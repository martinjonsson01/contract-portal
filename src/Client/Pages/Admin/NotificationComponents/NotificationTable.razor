@using Domain.StatusUpdates
@inject HttpClient _http;

<FetchData @ref="_dataFetcher"
           TData="List<StatusUpdate>"
           Url="api/v1/status-updates"
           Context="statusUpdates">

    <h4>Dina notifikationer</h4>
    <table class="table table-striped table-responsive-md btn-table">
        <thead>
        <tr>
            <th scope="col">Notifikationstext</th>
            <th scope="col">Notifikationstyp</th>
            <th scope="col">Skickad</th>
            <th scope="col">Ta bort</th>
        </tr>
        </thead>

        <tbody>
        @foreach (StatusUpdate statusUpdate in statusUpdates.OrderByDescending(status => status.Timestamp))
        {
            <NotificationTableRow @key="@statusUpdate.Id"
                                  StatusUpdate=@statusUpdate
                                  OnStatusUpdateRemoved=@Remove/>
        }
        </tbody>
    </table>

</FetchData>

@code {
    private FetchData<List<StatusUpdate>> _dataFetcher = null!;

    /// <summary>
    /// Adds a status update to the list.
    /// </summary>
    /// <param name="statusUpdate">The status update to add.</param>
    public void Add(StatusUpdate statusUpdate)
    {
        if (_dataFetcher.Data is null)
            return;

        _dataFetcher.Data.Add(statusUpdate);
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Removes a status update from the list.
    /// </summary>
    /// <param name="statusUpdate">The status update to remove.</param>
    private async Task Remove(StatusUpdate statusUpdate)
    {
        HttpResponseMessage response = await _http.DeleteAsync($"api/v1/status-updates/{statusUpdate.Id}");
        if (response.IsSuccessStatusCode)
        {
            // Using null forgiving operator because _statusUpdate
            // can not be null when remove button is pressed.
            _dataFetcher.Data!.Remove(statusUpdate);
            await InvokeAsync(StateHasChanged);
        }
    }

}
