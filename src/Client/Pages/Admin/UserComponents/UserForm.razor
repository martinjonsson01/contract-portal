@using Domain.Users
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using System.Text
@using System.Security.AccessControl
@using System.ComponentModel.DataAnnotations
@using System.Net.Mail
@using Application
@using Microsoft.AspNetCore.JsonPatch
@inject HttpClient _http
@inject IJSRuntime _js

<h4 id="user-form-title">Skapa ny användare</h4>

<EditForm Model="@_user" OnSubmit="ConvertAndUploadUser">

    <div class="mb-3">
        <label for="user-name" class="form-label">Användarnamn</label>
        <InputText id="user-name" class="form-control" placeholder="Användarens namn" @bind-Value="@_user.Name"/>
    </div>
    <div class="mb-3">
        <label for="user-password" class="form-label">Lösenord</label>
        <InputText id="user-password" class="form-control" placeholder="Användarens lösenord" @bind-Value="@_user.Password"/>
    </div>
    <div class="mb-3">
        <label for="user-email" class="form-label">Email</label>
        <InputText id="user-email" class="form-control" placeholder="Användarens e-mailadress" @bind-Value="@_user.Email"/>
    </div>
    <div class="mb-3">
        <label for="user-company" class="form-label">Företag</label>
        <InputText id="user-company" class="form-control" placeholder="Företagets namn" @bind-Value="@_user.Company"/>
    </div>
    <div class="mb-3">
        <label for="user-latest-payment-date" class="form-label">Senaste betaldatum</label>
        <InputDate id="user-latest-payment-date" class="form-control" @bind-Value="_user.LatestPaymentDate"/>
    </div>

    <button type="submit" class="btn btn-primary mb-3">Spara</button>
</EditForm>

@code {

    /// <summary>
    /// Called when a user has been added successfully.
    /// </summary>
    [Parameter]
    public EventCallback<User> OnUserAdded { get; set; } = EventCallback<User>.Empty;

    private User _user = CreateUnspecifiedUser();

    // Only has a value while a user is being edited.
    private User? _uneditedUser = null;

    /// <summary>
    /// Populates the form with the values of the given <see cref="User"/>.
    /// </summary>
    /// <param name="user">The data to edit.</param>
    public async Task EditUserAsync(User user)
    {
        await _js.InvokeVoidAsync("scrollToElement", "#user-form-title");
        _user = user;
        _user.Password = string.Empty;
        _uneditedUser = user.Copy();
    }

    private static User CreateUnspecifiedUser()
    {
        return new User
        {
            Name = string.Empty,
            Password = string.Empty,
            Email = string.Empty,
            Company = string.Empty,
            LatestPaymentDate = DateTime.UtcNow,
        };
    }

    private async Task ConvertAndUploadUser()
    {
        //Make sure email is valid
        if (!EmailValidator.IsValidEmail(_user.Email))
            return;

        // Make sure date is in UTC.
        _user.LatestPaymentDate = _user.LatestPaymentDate.ToUniversalTime();

        await UploadUser();
    }

    private async Task UploadUser()
    {
        HttpResponseMessage response;
        if (_uneditedUser is not null)
        {
            var patchDocument = new JsonPatchDocument();

            if (_user.Name != _uneditedUser.Name)
                patchDocument.Replace("/Name", _user.Name);
            if (!string.IsNullOrEmpty(_user.Password))
                patchDocument.Replace("/Password", _user.Password);
            if (_user.Email != _uneditedUser.Email)
                patchDocument.Replace("/Email", _user.Email);
            if (_user.Company != _uneditedUser.Company)
                patchDocument.Replace("/Company", _user.Company);
            if (_user.LatestPaymentDate != _uneditedUser.LatestPaymentDate)
                patchDocument.Replace("/LatestPaymentDate", _user.LatestPaymentDate);

            var json = JsonConvert.SerializeObject(patchDocument);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            response = await _http.PatchAsync($"api/v1/users/{_user.Id}", content);
        }
        else
        {
            var json = JsonConvert.SerializeObject(_user);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            response = await _http.PutAsync($"api/v1/users", content);
        }


        if (response.IsSuccessStatusCode)
        {
            await OnUserAdded.InvokeAsync(_user);
            _user = CreateUnspecifiedUser();
            _uneditedUser = null;
        }
    }
}
