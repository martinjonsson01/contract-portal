
@using Domain.Users
@inject HttpClient _http

<tr class="user-table-row" id=@($"user_id_{User.Id}")>

    <td>@User.Name</td>

    <td>@User.Company</td>

    <td>@User.Email</td>

    <td>@User.LatestPaymentDate.ToShortDateString()</td>

    <td>
        <button type="button"
                class="btn btn-outline-primary m-0"
                @onclick="@(async () => await UserOpeningForEdit.InvokeAsync(User))">
            <span class="oi oi-pencil"></span>
        </button>
    </td>

    <!-- Button trigger modal -->
    <td>
        <button type="button"
                class="btn btn-danger m-0"
                data-bs-toggle="modal"
                data-bs-target="#@($"modal_{User.Id}")">
            <span class="oi oi-trash"></span>
        </button>
    </td>
    <RemoveModal
        Id=@User.Id
        Title="Ta bort användaren"
        Message="@($"Vill du ta bort användaren {User.Name}?")"
        RemovalConfirmed="@(async () => await OnUserRemoved.InvokeAsync(User))"
    />
</tr>

@code {

    /// <summary>
    /// Called when a user has been removed successfully.
    /// </summary>
    [Parameter]
    public EventCallback<User> OnUserRemoved { get; set; } = EventCallback<User>.Empty;

    /// <summary>
    /// Called when a <see cref="User"/> is being opened to be edited.
    /// </summary>
    [Parameter]
    public EventCallback<User> UserOpeningForEdit { get; set; } = EventCallback<User>.Empty;

    /// <summary>
    /// The user.
    /// </summary>
    [Parameter, EditorRequired,]
    public User User { get; set; } = new();
}
