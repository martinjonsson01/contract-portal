@using Domain.Contracts
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using Blazorise.Markdown
@inject ILogger<AdminPage> _logger
@inject HttpClient _http
@inject IJSRuntime _js

<h4 id="contract-form-title">Skapa nytt kontrakt</h4>

<EditForm Model="@_contract" OnSubmit="OnSubmit">

    <div class="mb-3">
        <label for="contract-title" class="form-label">Titel</label>
        <InputText id="contract-title" class="form-control" placeholder="Kontraktets namn" @bind-Value="@_contract.Name"/>
    </div>
    <div class="mb-3">
        <label for="contract-description" class="form-label">Beskrivning</label>
        <Markdown id="contract-description"
                  @bind-Value="@_contract.Description"
                  MinHeight="@MinFormHeight"
                  Placeholder="T.ex. vad erbjudandet innebär"/>
    </div>
    <div class="mb-3">
        <label for="contract-instructions" class="form-label">Hur man nyttjar erbjudandet</label>
        <Markdown id="contract-instructions"
                  @bind-Value="@_contract.Instructions"
                  MinHeight="@MinFormHeight"
                  Placeholder="T.ex. vilken webbsida man ska gå in på"/>
    </div>
    <div class="mb-3">
        <label for="contract-banner" class="form-label">Banderoll till kontrakt</label>
        <InputFile id="contract-banner" class="form-control" accept=".png, .jpg, .jpeg, .gif" OnChange="(e => OnFileChosen(e, ref _inspirationalContent))"/>
    </div>
    <div class="mb-3">
        <label for="document" class="form-label">Ytterligare dokument eller bild</label>
        <InputFile id="document" class="form-control" accept=".pdf, .docx, .xlsx, .png, .jpg, .jpeg, .gif" OnChange="(e => OnFileChosen(e, ref _additionalDocumentContent))"/>
    </div>
    <div class="mb-3">
        <label for="contract-faq" class="form-label">Vanliga frågor</label>
        <Markdown id="contract-faq"
                  @bind-Value="@_contract.FAQ"
                  MinHeight="@MinFormHeight"
                  Placeholder="T.ex. frågor följt av svar"/>
    </div>
    <div class="mb-4">
        <label class="form-label">Nyckelord för sökning</label>
        <ListInput Items="@_contract.Tags"
                   ItemFactory="@(() => new Tag())"
                   StringConverter="@(new TagTypeConverter())"
                   Placeholder="T.ex. miljövänlig"/>
    </div>

    <hr class="mb-4"/>

    <div class="mb-3">
        <label for="supplier-name" class="form-label">Leverantörens namn</label>
        <InputTextArea id="supplier-name" class="form-control" placeholder="T.ex. Prodigo" @bind-Value="@_contract.SupplierName"/>
    </div>
    <div class="mb-3">
        <label for="supplier-contact-info" class="form-label">Kontaktinformation för leverantören</label>
        <InputTextArea id="supplier-contact-info" class="form-control" placeholder="T.ex. namn, e-mail eller telefonnummer" @bind-Value="@_contract.SupplierContactInfo"/>
    </div>
    <div class="mb-3">
        <label for="supplier-description" class="form-label">Om leverantören</label>
        <Markdown id="supplier-description"
                  @bind-Value="@_contract.SupplierDescription"
                  MinHeight="@MinFormHeight"
                  Placeholder="T.ex. vad leverantören står för"/>
    </div>
    <div class="mb-4">
        <label for="supplier-logo" class="form-label">Leverantörens logotyp</label>
        <InputFile id="supplier-logo" class="form-control" accept=".png, .jpg, .jpeg, .gif" OnChange="(e => OnFileChosen(e, ref _supplierLogoContent))"/>
    </div>

    <!-- Prevent implicit submission of the form -->
    <button type="submit" disabled style="display: none" aria-hidden="true"></button>
    <!-- Actually visible submit button -->
    <button type="submit" class="btn btn-primary mb-3">Spara</button>

</EditForm>

@code {

    /// <summary>
    /// Called when a contract has been submitted successfully.
    /// </summary>
    [Parameter]
    public EventCallback<Contract> OnContractUploaded { get; set; } = EventCallback<Contract>.Empty;

    private bool _shouldRender;

    private Contract _contract = CreateEmptyContract();

    private MultipartFormDataContent _supplierLogoContent = new MultipartFormDataContent();

    private MultipartFormDataContent _inspirationalContent = new MultipartFormDataContent();

    private MultipartFormDataContent _additionalDocumentContent = new MultipartFormDataContent();

        private const string MinFormHeight = "5rem";

    /// <summary>
    /// Populates the form with the values of the given <see cref="Contract"/>.
    /// </summary>
    /// <param name="contract">The data to edit.</param>
    public async Task EditContractAsync(Contract contract)
    {
        await _js.InvokeVoidAsync("scrollToElement", "#contract-form-title");
        _shouldRender = true;
        _contract = contract;
        await DownloadContractFiles();
    }

    private async Task DownloadContractFiles()
    {
        await DownloadContractFile(_contract.InspirationalImagePath, content => _inspirationalContent = content);
        await DownloadContractFile(_contract.SupplierLogoImagePath, content => _supplierLogoContent = content);
        await DownloadContractFile(_contract.AdditionalDocument, content => _additionalDocumentContent = content);
    }

    private async Task DownloadContractFile(string path, Action<MultipartFormDataContent> setContent)
    {
        var fileUri = new Uri(Path.Join(_http.BaseAddress?.ToString(), path[1..]), UriKind.Absolute);

        HttpResponseMessage response = await _http.GetAsync(fileUri);
        string mediaType = response.Content.Headers.ContentType?.MediaType ?? "images/jpeg";
        Stream stream = await response.Content.ReadAsStreamAsync();

        MultipartFormDataContent content = CreateFormDataContent(stream, fileUri.Segments.Last(), mediaType);
        setContent(content);
    }

    private static Contract CreateEmptyContract()
    {
        return new Contract
        {
            Name = string.Empty,
            Description = string.Empty,
            Instructions = string.Empty,
            FAQ = string.Empty,
            SupplierLogoImagePath = string.Empty,
            SupplierName = string.Empty,
            SupplierContactInfo = string.Empty,
            SupplierDescription = string.Empty,
        };
    }

    /// <inheritdoc />
    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    private void OnFileChosen(InputFileChangeEventArgs arg, ref MultipartFormDataContent content)
    {
        _shouldRender = false;

        const long bitsInAKilobyte = 1024;
        const long kilobytesInAMegabyte = 1024;
        const long maxFileSize = bitsInAKilobyte * kilobytesInAMegabyte * 100;

        Stream fileStream = arg.File.OpenReadStream(maxFileSize);

        content = CreateFormDataContent(fileStream, arg.File.Name, arg.File.ContentType);

        _shouldRender = true;
    }

    private MultipartFormDataContent CreateFormDataContent(Stream fileStream, string fileName, string contentType)
    {
        StreamContent fileContent;

        try
        {
            fileContent = new StreamContent(fileStream);
        }
        catch (IOException ex)
        {
            _logger.LogInformation("{FileName} not uploaded: {Message}", fileName, ex.Message);
            throw;
        }

        fileContent.Headers.ContentType = new MediaTypeHeaderValue(contentType);

        var content = new MultipartFormDataContent();
        content.Add(fileContent, "\"file\"", fileName);

        return content;
    }

    private async Task OnSubmit()
    {
        _contract.SupplierLogoImagePath = await UploadFile(_supplierLogoContent, "images");

        _contract.InspirationalImagePath = await UploadFile(_inspirationalContent, "images");

        _contract.AdditionalDocument = await UploadFile(_additionalDocumentContent, "documents");

        await UploadContract();
    }

    private async Task<string> UploadFile(MultipartFormDataContent content, string endPoint)
    {
        if (content is null) return string.Empty;

        try
        {
            HttpResponseMessage response = await _http.PostAsync($"/api/v1/{endPoint}", content);

            if (response.IsSuccessStatusCode)
            {
                string imageLocation = await response.Content.ReadAsStringAsync();
                return imageLocation;
            }
            throw new ArgumentException(nameof(content));
        }
        finally
        {
            content.Dispose();
        }
    }

    private async Task UploadContract()
    {
        string json = JsonConvert.SerializeObject(_contract);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        HttpResponseMessage response = await _http.PutAsync($"/api/v1/contracts/{_contract.Id}", content);
        if (response.IsSuccessStatusCode)
        {
            await OnContractUploaded.InvokeAsync(_contract);
            _contract = CreateEmptyContract();
        }
    }
}
